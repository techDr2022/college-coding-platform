// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql" // or your database provider
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Student {
  id            String       @id @default(cuid())
  studentId     String       @unique // College provided ID
  email         String?      @unique
  name          String?
  password      String
  department    String
  PhoneNumber   String?      @unique
  semester      Int?
  batch         String       // Graduation year
  role          Role        @default(STUDENT)
  isVerified    Boolean     @default(false)
  isActive      Boolean     @default(true)
  submissions   Submission[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([studentId])
  @@index([email])
}

model Professor {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String
  password      String
  department    String
  professorId   String       @unique
  role          Role         @default(PROFESSOR)
  problems      Problems[]   
  assessments   Assessments[]
  isVerified    Boolean      @default(false)
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([professorId])
  @@index([email])
}

enum Role {
  STUDENT
  PROFESSOR
  ADMIN
}

enum DifficultyLevel {
  Easy
  Medium 
  Hard
}

enum AssessmentStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  ARCHIVED
}

model Problems {
  id           String          @id @default(cuid())
  title        String
  description  String         @db.Text
  difficulty   DifficultyLevel
  assessment   Assessments     @relation(fields: [assessmentId], references: [id])
  assessmentId String
  professor    Professor       @relation(fields: [professorId], references: [id])
  professorId  String
  testCases    TestCases[]
  submissions  Submission[]    // Add this relation
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([assessmentId])
  @@index([professorId])
  @@index([difficulty])
}

model Submission {
  id            String    @id @default(cuid())
  code          String    @db.Text
  language      String
  status        Status
  score         Int
  student       Student   @relation(fields: [studentId], references: [id])
  studentId     String
  problem       Problems  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId     String
  createdAt     DateTime  @default(now())
  executionTime Int?      // Time taken in milliseconds
  memoryUsed    Int?      // Memory used in MB
  errorMessage  String?   // Store any compilation/runtime errors
  testResults   Json?     // Store detailed test case results

  @@index([studentId])
  @@index([problemId])
  @@index([status])
}
enum Status {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  ERROR
}

model Assessments {
  id             String           @id @default(cuid())
  title          String
  batch          String[]         // Changed from year to batch
  departments    String[]
  startTime      DateTime
  endTime        DateTime
  duration       Int
  totalQuestions Int
  topics        String[]
  status        AssessmentStatus @default(DRAFT)
  problems      Problems[]
  professor     Professor        @relation(fields: [professorId], references: [id])
  professorId   String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([batch])
  @@index([professorId])
}
model TestCases {
  id         String    @id @default(cuid())
  input      String    @db.Text
  output     String    @db.Text
  score      Int
  isHidden   Boolean
  problem    Problems  @relation(fields: [problemId], references: [id])
  problemId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@index([problemId])
}